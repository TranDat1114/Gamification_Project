@page "/import"
@inject IExcelService _excelService;
@inject IJSRuntime js;
@inject JsInterpop _jsInterpop;
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Import file</PageTitle>

<div class="flex items-center justify-center w-96 mx-auto ">
    <label for="dropzone-file" class="flex flex-col items-center justify-center w-full border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-white shadow-lg  hover:bg-gray-100  @(fileName!="No file selected"?"h-28":"h-64") ">
        @if(fileName == "No file selected"){
        <div class="flex flex-col items-center justify-center pt-5 pb-6">
            <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
            </svg>
            <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Click to upload</span></p>
            <p class="text-xs text-gray-500 dark:text-gray-400">Xlsx file only</p>
            <p class="text-xs text-gray-500 dark:text-gray-400">And make sure that your file in right format</p>
        </div>
        }else{
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
            <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
            </svg>
            <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">@fileName</span>
            was selected
            </p>
        </div>
        }
        <InputFile id="dropzone-file" type="file" class="hidden" accept=".xlsx" OnChange="@HandleFileUpload" />
    </label>
</div> 



<div class="mt-8">
@if(fileName != "No file selected"){
    <div class="flex items-center gap-2 my-4 w-full justify-center">

    <button class="text-pink-500 px-4 py-2 bg-white shadow-lg rounded-lg border" @onclick="ImportData">Import</button>

    <button class="text-blue-600 px-4 py-2 bg-white shadow-lg rounded-lg border" @onclick="ExportData">Export</button>
    <button class="text-red-500 px-4 py-2 bg-white shadow-lg rounded-lg border" @onclick="EndGame">@(!end?"End Game":"Show Result")</button>

    <button class="text-green-500 px-4 py-2 bg-white shadow-lg rounded-lg border" @onclick="SortPoint">Sort Point</button>
    <button class="text-yellow-500 px-4 py-2 bg-white shadow-lg rounded-lg border" @onclick="SortGroup">Sort Group</button>
    </div>

}
@if (excelTable is not null)
            {
                <div class=" bg-white shadow-lg min-h-min p-4 rounded-lg">

    <table class="table-auto border-collapse border border-slate-500 w-full ">
        <thead>
            <tr class="my-2">
                <th class="mx-2 border border-slate-600 ">#</th>
                <th class="mx-2 border border-slate-600 ">Name</th>
                <th class="mx-2 border border-slate-600 ">Group</th>
                <th class="mx-2 border border-slate-600 ">Minus</th>
                <th class="mx-2 border border-slate-600 ">Point</th>
                <th class="mx-2 border border-slate-600 ">Plus</th>
            </tr>
        </thead>
        <tbody>
            
                @foreach (var item in excelTable)
                {
                    <tr class=" my-2">
                        <td class="text-center border border-slate-600">@item.Id</td>
                        <td class="text-center border border-slate-600">@item.Name</td>
                        <td class="text-center border border-slate-600">@item.Group</td>
                        <td class="text-center border border-slate-600"> <button @onclick="() => MinusPoint(item.Id)">
                            <div class=" p-1 rounded-md bg-red-400 hover:bg-red-500">
                                    ➖
                                </div>
                            </button>
                        </td>
                        <td class="text-center border border-slate-600">@item.Point</td>
                        <td class="text-center border border-slate-600">
                            <button @onclick="() => PlusPoint(item.Id)">
                                <div class=" p-1 rounded-md bg-green-400 hover:bg-green-500">
                                    ➕
                                </div>
                                </button>
                        </td>
                    </tr>
                }
                    </tbody>
    </table>
                </div>

}
            else
            {
                <p class="text-center">There is no thing to show</p>
                <p class="text-center">Choice a file and click import </p>


<div class="w-full flex justify-center items-center mt-2">
    <button class="text-black px-4 py-2  bg-white shadow-lg rounded-lg border" @onclick="CreateSample">Create Sample File</button>
</div>

            }

</div>

@code {
    private IBrowserFile excelFile;
    private List<ExcelData> excelTable { get; set; }
    private HubConnection? _hubConnection;

    private int RangePoint { get; set; } = 1;


    private bool end { get; set; } = false;
    private string fileName { get; set; } ="No file selected";

    private List<string> messages { get; set; } = new List<string>();
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        excelFile = e.File;
        fileName = excelFile.Name;
    }

    private async Task ImportData()
    {
        if (excelFile is not null)
        {
            // Gọi hàm xử lý import từ thư viện đã chọn
            var datas = await _excelService.ImportAsync(excelFile.OpenReadStream());
            await UpdateExcelData(datas);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(("http://localhost:5000/exceldatahub"))
        .Build();

        _hubConnection.On<List<ExcelData>,string>("SendMessage", (datas,message) =>
        {
            excelTable = datas;
            InvokeAsync(StateHasChanged);
        });
         _hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            if(message == "Connected new client"){
                UpdateExcelData(excelTable);
            }
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
    }
    private async Task UpdateExcelData(List<ExcelData> datas)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", datas);
        }
    }

    private async Task PlusPoint(int id)
    {
        var data = excelTable.Where(x => x.Id == id).FirstOrDefault();
        if (data?.Point + RangePoint <= 99999)
        {
            data.Point += RangePoint;
        }
        else
        {
            data.Point = 99999;
        }
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", excelTable);
        }

    }
    private async Task MinusPoint(int id)
    {
        var data = excelTable.Where(x => x.Id == id).FirstOrDefault();
        if (data?.Point - RangePoint >= 0)
        {
            data.Point -= RangePoint;

        }
        else
        {
            data.Point = 0;
        }
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", excelTable);
        }

    }
    private async Task SortPoint()
    {
        excelTable = excelTable.OrderByDescending(x => x.Point).ToList();

        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableSort", excelTable);
        }
}

private async Task SortGroup()
{
    var groupedData = excelTable.GroupBy(x => x.Group)
                               .Select(g => new { Group = g.Key, TotalPoints = g.Sum(x => x.Point), Data = g.OrderByDescending(x => x.Point).ToList() })
                               .OrderByDescending(g => g.TotalPoints)
                               .ToList();

    excelTable.Clear();
    foreach (var groupData in groupedData)
    {
        excelTable.AddRange(groupData.Data);
    }

    if (_hubConnection is not null)
    {
        await _hubConnection.SendAsync("SendDataTableSort", excelTable);
    }
}

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;


    private async Task CreateSample()
    {
        var path = await _excelService.CreateSample(@"./ExportData","Sample");
        byte[] fileData = GetYourFileData(path);
        await _jsInterpop.SaveFileAs("Sample.xlsx", fileData, js);
        await DeleteFile("./ExportData/Sample.xlsx");
    }
    private byte[] GetYourFileData(string filePath)
    {
        byte[] fileData = System.IO.File.ReadAllBytes(filePath);
        return fileData;
    }
    private async Task ExportData()
    {
        await _excelService.ExportToExcel(@"./ExportData/", "Data", excelTable);
        byte[] fileData = GetYourFileData("./ExportData/Data.xlsx");
    await _jsInterpop.SaveFileAs("Data.xlsx", fileData, js);
        await DeleteFile("./ExportData/Data.xlsx");
    }

private async Task DeleteFile(string filePath)
{
    if (System.IO.File.Exists(filePath))
    {
        System.IO.File.Delete(filePath);
    }
}

private List<ExcelData> Take3Winner(List<ExcelData> datas)
{
    return datas.OrderByDescending(x => x.Point).Take(3).ToList();
}

private async Task EndGame()
{
    if(!end){
            await _hubConnection.SendAsync("EndGame", "End Game");
            end = true;
    }else{
            await _hubConnection.SendAsync("EndGame", "Start Game");
            end = false;
        }
    }
}