@page "/import"
@inject IExcelService _excelService;
@inject IExcelSignalService _excelSignalService;
<PageTitle>Import file</PageTitle>

<InputFile OnChange="@HandleFileUpload" />
<button @onclick="ImportData">Import</button>

<button class="text-green-400" @onclick="CreateSample">Create Sample</button>
<button class="text-blue-600" @onclick="ExportData">Export</button>

@foreach (var message in messages)
{
    <p>@message</p>
}

@if (excelTable is not null)
{

    foreach (var item in excelTable)
    {
        <p>@item.Name</p>
        <p>@item.Group</p>
        <button @onclick="() => MinusPoint(item.Id)">Minus</button>
        <p>@item.Point</p>
        <button @onclick="() => PlusPoint(item.Id)">Plus</button>
    }

}
else
{
    <p>There is no thing to show</p>
}

@code {
    private IBrowserFile excelFile;
    private List<ExcelData> excelTable { get; set; }
    private HubConnection? _hubConnection;

    private List<string> messages { get; set; } = new List<string>();
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        excelFile = e.File;
    }

    private async void ImportData()
    {
        if (excelFile is not null)
        {
            // Gọi hàm xử lý import từ thư viện đã chọn
            var datas = await _excelService.ImportAsync(excelFile.OpenReadStream());
            UpdateExcelData(datas);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(("http://localhost:5177/exceldatahub"))
        .Build();
        _hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            this.messages.Add(message);
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<List<ExcelData>>("SendMessage", (datas) =>
        {
            excelTable = datas;
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
    }
    private async Task UpdateExcelData(List<ExcelData> datas)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", datas);
        }
    }

    private async Task PlusPoint(int id)
    {
        excelTable.Where(x => x.Id == id).FirstOrDefault().Point += 5;
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", excelTable);
        }

    }
    private async Task MinusPoint(int id)
    {
        excelTable.Where(x => x.Id == id).FirstOrDefault().Point -= 5;
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendDataTableUpdate", excelTable);
        }

    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;


    private void CreateSample()
    {
        _excelService.CreateSample("Sample.xlsx");
    }

    private void ExportData()
    {
        _excelService.ExportToExcel(@"D:\Code\FPT\Phong\Export Data", "Data_1", excelTable);
    }
}