@page "/"
@implements IAsyncDisposable
@inject IJSRuntime _js;
<PageTitle>Home</PageTitle>

<div class="md:p-6 p-1 min-h-min w-full bg-white rounded-md shadow-lg">
    @if (message != "End Game")
    {
        <div class="grid grid-flow-row gap-2 overflow-y-hidden">
            @{
                if (excelTable.Count > 0)
                {
                    int count = 0;
                    foreach (var item in excelTable)
                    {
                        count++;
                        <div class="lg:h-20 w-full rounded-lg bg-[#f5f5f5] shadow-sm">
                            <div class="grid grid-cols-12 lg:gap-5 items-center justify-items-start mx-6">
                                <div class="items-center flex w-12 col-span-1">
                                    <div class="lg:text-2xl font-bold font-['Quicksand']">@count</div>
                                    <div class="lg:text-sm font-normal font-['Quicksand']">@GetOrdinalSuffix(count)
                                    </div>
                                </div>
                                <img class="col-span-2 lg:w-14 w-8 h-8 lg:h-14 rounded-full"
                                    src=@($"https://picsum.photos/56/56?random={@item.Id}") />
                                <div class="col-span-3 lg:text-2xl font-bold font-['Quicksand']">@item.Name
                                </div>
                                <div class="col-span-2 lg:text-2xl font-bold font-['Quicksand']">@item.Group</div>
                                <div class="col-span-2 lg:text-2xl font-bold font-['Quicksand']">@item.Point pts</div>
                                <img class="col-span-2 w-16 h-16 lg:w-18 lg:h-20" src=@($"./assets/{item.RankImage}") />
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="h-full w-full flex items-center justify-center flex-col">
                        <div class="text-2xl font-bold font-['Quicksand']">There is nothing to show</div>

                        <div class="mt-4">
                            <button class="p-4 shadow-lg border rounded-xl" @onclick=RefreshData>
                                Click to refresh data from admin
                            </button>
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="w-full h-[800px] relative ">
            <div class="bottom-0 absolute top-0 w-full grid grid-cols-3 items-end gap-2">
                <div class="w-full bottom-0 h-full relative">
                    <div class="w-full">
                        <img class="md:w-44 md:h-44 h-32 w-32 rounded-full m-auto drop-shadow-lg"
                            src=@($"https://picsum.photos/400/400?random={excelTable[1].Id}") />
                    </div>
                    <div class="w-full absolute bottom-0 h-[60%] bg-teal-500 rounded-t-lg shadow-lg">
                        <div class="w-full my-8">
                            <p
                                class="text-center font-bold font-['QuickSand'] lg:text-3xl text-xl text-white drop-shadow-lg">
                                @excelTable[1].Name</p>
                        </div>
                        <div class="w-full">
                            <img class="md:w-44 md:h-44 h-32 w-32 drop-shadow-lg m-auto" src="./assets/Silver-medal.png" />
                        </div>
                    </div>
                </div>
                <div class="w-full bottom-0 h-full relative">
                    <div class="w-full">
                        <img class="md:w-44 md:h-44 h-32 w-32 rounded-full m-auto drop-shadow-lg"
                            src=@($"https://picsum.photos/400/400?random={excelTable[0].Id}") />
                    </div>
                    <div class="w-full absolute bottom-0 h-[75%] bg-amber-400 rounded-t-lg shadow-lg">
                        <div class="w-full my-8">
                            <p
                                class="text-center font-bold font-['QuickSand'] lg:text-3xl text-xl text-white drop-shadow-lg">
                                @excelTable[0].Name</p>
                        </div>
                        <div class="w-full">
                            <img class="md:w-44 md:h-44 h-32 w-32 drop-shadow-lg m-auto" src="./assets/Gold-medal.png" />
                        </div>
                    </div>
                </div>
                <div class="w-full bottom-0 h-full relative">
                    <div class="w-full">
                        <img class="md:w-44 md:h-44 h-32 w-32 rounded-full m-auto drop-shadow-lg"
                            src=@($"https://picsum.photos/400/400?random={excelTable[2].Id}") />
                    </div>
                    <div class="w-full absolute bottom-0 h-[50%] bg-green-500 rounded-t-lg shadow-lg">
                        <div class="w-full my-8">
                            <p
                                class="text-center font-bold font-['QuickSand'] lg:text-3xl text-xl text-white drop-shadow-lg">
                                @excelTable[2].Name</p>
                        </div>
                        <div class="w-full">
                            <img class="md:w-44 md:h-44 h-32 w-32 drop-shadow-lg m-auto" src="./assets/Bronze-medal.png" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="absolute w-full h-full ">
                <dotlottie-player class="w-full h-full"
                    src="https://lottie.host/8f7837d6-c655-4443-bdc0-1a9d340f8307/ibeWhwJJsO.json" background="transparent"
                    speed="1" loop autoplay></dotlottie-player>
            </div>
        </div>
    }

</div>

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="loading-spinner"></div>
    </div>
}


<div class="fixed top-0 left-0 bg-white shadow-lg w-full max-w-xs p-4 rounded-lg m-4 text-gray-900 @toastClass">
    <div class="flex items-center mb-3 justify-between">
        <span class="mb-1 text-sm font-semibold text-gray-900 ">New notification</span>
        <button @onclick="HideToast"><i class="w-8 h-8" data-lucide="x"></i></button>

    </div>
    <div class="flex items-center">
        <div class="ms-3 text-sm font-normal">
            <div class="text-sm font-semibold text-gray-900 ">From System</div>
            <div class="text-sm font-normal">@message</div>
            <span class="text-xs font-medium text-blue-600">a few seconds ago</span>
        </div>
    </div>
</div>


@code {

    private bool isLoading = false;
    private HubConnection? _hubConnection;
    private string message = "";
    List<ExcelDataShow> excelTable = new();
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(("http://localhost:5000/exceldatahub"))
        .Build();

        _hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            this.message = message;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<List<ExcelData>, string>("SendMessage", (datas, message) =>
        {
            excelTable.Clear();
            if (message != "Imported")
            {
                datas.ToList().ForEach(x =>
    {
        excelTable.Add(new ExcelDataShow(x));
    });
                @* if (excelTable.Count > 0)
{
ShowToast(message);
} *@
            }
            else
            {
                datas.OrderByDescending(x => x.Point)
                .ToList()
                .ForEach(x =>
                {
                    excelTable.Add(new ExcelDataShow(x));
                });
            }
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task RefreshData()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("Connected");
        }
        isLoading = true;

        // Simulate an asynchronous operation (e.g., API call, database query)
        await Task.Delay(1000);

        isLoading = false;
        if (excelTable.Count > 0)
        {
            await ShowToast("Refreshed data successfully");
        }
        else
        {
            await ShowToast("Maybe your admin is not online");

        }

    }
    private string toastClass = "hidden";

    public async Task ShowToast(string message)
    {
        this.message = message;
        toastClass = "block";

        // Tự động ẩn toast sau một khoảng thời gian nếu cần
        await Task.Delay(3000).ContinueWith(_ => HideToast());
        await _js.InvokeVoidAsync("LucideCreate");
        await InvokeAsync(StateHasChanged);
    }
    private async Task HideToast()
    {
        try
        {
            toastClass = "hidden";

            await InvokeAsync(StateHasChanged);

        }
        catch
        {

        }
    }
    private string GetOrdinalSuffix(int number)
    {
        if (number < 1) { return $"th"; }
        switch (number % 100) { case 11: case 12: case 13: return $"th"; }
        switch (number %
        10)
        { case 1: return $"st"; case 2: return $"nd"; case 3: return $"rd"; default: return $"th"; }
    }
}